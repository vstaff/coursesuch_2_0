from PyQt6.QtWidgets import (
    QWidget,
    QVBoxLayout,
    QTableWidget,
    QTableWidgetItem,
    QMenu,
    QDialog,
    QFormLayout,
    QLineEdit,
    QPushButton,
    QMessageBox,
    QHeaderView,
    QLabel,
)
from PyQt6.QtCore import Qt
from PyQt6.QtWidgets import QFileDialog
import re
from AVL_Tree import Priem
from ViewAVLT import AVLWindow


pattern = r"[–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+ [–ê-–Ø–Å][–∞-—è—ë]+"
pattern2 = (
    r"(0[1-9]|[12][0-9]|3[01]) (—è–Ω–≤|—Ñ–µ–≤|–º–∞—Ä|–∞–ø—Ä|–º–∞–π|–∏—é–Ω|–∏—é–ª|–∞–≤–≥|—Å–µ–Ω|–æ–∫—Ç|–Ω–æ—è|–¥–µ–∫) \d{4}"
)


class AVLTableView(QWidget):
    def __init__(self, tree, main_window, table):
        super().__init__()
        self.tree = tree
        self.main_window = main_window
        self.table_data = table

        self.layout = QVBoxLayout(self)
        self.table = QTableWidget()
        self.layout.addWidget(self.table)
        self.setLayout(self.layout)

        self.table.setColumnCount(6)
        self.table.setHorizontalHeaderLabels(
            ["–ö–ª–∏—á–∫–∞", "–í–ª–∞–¥–µ–ª–µ—Ü", "–î–∏–∞–≥–Ω–æ–∑", "–î–æ–∫—Ç–æ—Ä", "–î–∞—Ç–∞", "–ò–Ω–¥–µ–∫—Å"]
        )
        self.table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)

        for i in range(6):
            self.table.setColumnWidth(i, 100)

        header = self.table.horizontalHeader()
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)
        self.table.verticalHeader().setSectionResizeMode(
            QHeaderView.ResizeMode.ResizeToContents
        )
        self.table.setContextMenuPolicy(Qt.ContextMenuPolicy.CustomContextMenu)
        self.table.customContextMenuRequested.connect(self.show_context_menu)

        self.refresh_table()

    def open_graphic_tree(self):
        self._graphic_window = AVLWindow(self.tree, self.main_window, self.table_data)
        self._graphic_window.show()
        self._graphic_window.show()

    def refresh_table(self):
        rows = []

        def traverse(node):
            if not node:
                return
            traverse(node._left)
            cur = node._list._head
            while cur:
                idx = cur._data
                p = None
                if 0 <= idx < len(self.main_window.all_data):
                    p = self.main_window.all_data[idx]

                if p is None:
                    p = Priem("[–£–¥–∞–ª–µ–Ω–æ]", "[–£–¥–∞–ª–µ–Ω–æ]", "-", "-", "-")

                rows.append((p._name, p._owner, p._dianoz, p._doctor, p._date, idx))
                cur = cur._next
            traverse(node._right)

        traverse(self.tree._root)

        self.table.setRowCount(len(rows))
        for row, (name, owner, diag, doctor, date, idx) in enumerate(rows):
            self.table.setItem(row, 0, QTableWidgetItem(name))
            self.table.setItem(row, 1, QTableWidgetItem(owner))
            self.table.setItem(row, 2, QTableWidgetItem(diag))
            self.table.setItem(row, 3, QTableWidgetItem(doctor))
            self.table.setItem(row, 4, QTableWidgetItem(date))
            self.table.setItem(row, 5, QTableWidgetItem(str(idx)))

    def show_context_menu(self, pos):
        menu = QMenu()
        add_action = menu.addAction("–î–æ–±–∞–≤–∏—Ç—å")
        delete_action = menu.addAction("–£–¥–∞–ª–∏—Ç—å")
        find_action = menu.addAction("–ù–∞–π—Ç–∏")
        export_action = menu.addAction("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
        show_tree_action = menu.addAction("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ")  # ‚úÖ –ù–æ–≤—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é

        action = menu.exec(self.table.mapToGlobal(pos))
        if action == add_action:
            self.show_insert_dialog()
        elif action == delete_action:
            self.show_delete_dialog()
        elif action == find_action:
            self.show_find_dialog()
        elif action == export_action:
            self.export_data()
        elif action == show_tree_action:
            self.open_graphic_tree()  # ‚úÖ –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ä–µ–≤–∞

    def show_insert_dialog(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º")
        layout = QFormLayout(dialog)

        name = QLineEdit()
        owner = QLineEdit()
        diag = QLineEdit()
        doctor = QLineEdit()
        date = QLineEdit()

        layout.addRow("–ö–ª–∏—á–∫–∞ (–ø—Ä–∏–º–µ—Ä: –ë–∞—Ä—Å–∏–∫):", name)
        layout.addRow("–í–ª–∞–¥–µ–ª–µ—Ü (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á –ü–µ—Ç—Ä–æ–≤):", owner)
        layout.addRow("–î–∏–∞–≥–Ω–æ–∑ (–ø—Ä–∏–º–µ—Ä: –ì–∞—Å—Ç—Ä–∏—Ç):", diag)
        layout.addRow("–î–æ–∫—Ç–æ—Ä (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á –ü–µ—Ç—Ä–æ–≤):", doctor)
        layout.addRow("–î–∞—Ç–∞ (–ø—Ä–∏–º–µ—Ä 10 –¥–µ–∫ 2023):", date)

        btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        layout.addWidget(btn)

        def add():
            if not name.text() or not owner.text():
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ò–º—è –∏ –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                return
            if not (
                re.fullmatch(r"[–ê-–Ø][–∞-—è]+", name.text())
                and re.fullmatch(pattern, owner.text())
                and re.fullmatch(r"[–ê-–Ø][–∞-—è]+( [–∞-—è]+)*", diag.text())
                and re.fullmatch(pattern, doctor.text())
                and re.fullmatch(pattern2, date.text())
            ):
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return
            if not self.table_data.is_key(name.text(), owner.text()):
                QMessageBox.warning(
                    dialog, "–û—à–∏–±–∫–∞", "–¢–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ"
                )
                return

            data = Priem(
                name.text(), owner.text(), diag.text(), doctor.text(), date.text()
            )

            existing = False
            to_remove = []

            for idx in list(self.tree.find_index_by_data(data)):
                if 0 <= idx < len(self.main_window.all_data):
                    p = self.main_window.all_data[idx]
                    if p is None:
                        to_remove.append(idx)
                    elif (
                        p._name == data._name
                        and p._owner == data._owner
                        and p._dianoz == data._dianoz
                        and p._doctor == data._doctor
                        and p._date == data._date
                    ):
                        existing = True
                        break

            for idx in to_remove:
                self.tree._root, _ = self.tree.remove_index(data, idx)
                self.main_window.free_indices.append(idx)

            if existing:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–¢–∞–∫–∞—è –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            if self.main_window.free_indices:
                index = self.main_window.free_indices.pop(0)
                if index >= len(self.main_window.all_data):
                    self.main_window.all_data.append(data)
                else:
                    self.main_window.all_data[index] = data
            else:
                index = len(self.main_window.all_data)
                self.main_window.all_data.append(data)

            self.tree._root, _ = self.tree.insert(data, index, self.tree._root)
            dialog.accept()
            self.refresh_table()

        btn.clicked.connect(add)
        dialog.exec()

    def show_delete_dialog(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏—ë–º")
        layout = QFormLayout(dialog)

        name = QLineEdit()
        owner = QLineEdit()
        diag = QLineEdit()
        doctor = QLineEdit()
        date = QLineEdit()

        layout.addRow("–ö–ª–∏—á–∫–∞ (–ø—Ä–∏–º–µ—Ä: –ë–∞—Ä—Å–∏–∫):", name)
        layout.addRow("–í–ª–∞–¥–µ–ª–µ—Ü (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á –ü–µ—Ç—Ä–æ–≤):", owner)
        layout.addRow("–î–∏–∞–≥–Ω–æ–∑ (–ø—Ä–∏–º–µ—Ä: –ì–∞—Å—Ç—Ä–∏—Ç):", diag)
        layout.addRow("–î–æ–∫—Ç–æ—Ä (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á –ü–µ—Ç—Ä–æ–≤):", doctor)
        layout.addRow("–î–∞—Ç–∞ (–ø—Ä–∏–º–µ—Ä 10 –¥–µ–∫ 2023):", date)

        btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        layout.addWidget(btn)

        def delete():
            if not name.text() or not owner.text():
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ò–º—è –∏ –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                return

            # üîç –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç–∞
            if not (
                re.fullmatch(r"[–ê-–Ø][–∞-—è]+", name.text())
                and re.fullmatch(pattern, owner.text())
                and re.fullmatch(r"[–ê-–Ø][–∞-—è]+( [–∞-—è]+)*", diag.text())
                and re.fullmatch(pattern, doctor.text())
                and re.fullmatch(pattern2, date.text())
            ):
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return

            data = Priem(
                name.text(), owner.text(), diag.text(), doctor.text(), date.text()
            )

            found_index = None
            for idx in self.tree.find_index_by_data(data):
                if 0 <= idx < len(self.main_window.all_data):
                    p = self.main_window.all_data[idx]
                    if (
                        p
                        and p._name == data._name
                        and p._owner == data._owner
                        and p._dianoz == data._dianoz
                        and p._doctor == data._doctor
                        and p._date == data._date
                    ):
                        found_index = idx
                        break

            if found_index is None:
                QMessageBox.warning(
                    dialog, "–û—à–∏–±–∫–∞", "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ"
                )
                return

            last_index = len(self.main_window.all_data) - 1

            if found_index == last_index:
                self.tree._root, removed = self.tree.remove_index(data, found_index)
                if removed:
                    self.main_window.all_data.pop()
            else:
                last_item = self.main_window.all_data.pop()
                self.tree._root, removed = self.tree.remove_index(data, found_index)
                if removed:
                    self.tree._root, _ = self.tree.remove_index(last_item, last_index)
                    self.main_window.all_data[found_index] = last_item
                    self.tree._root, _ = self.tree.insert(
                        last_item, found_index, self.tree._root
                    )

            if removed:
                self.refresh_table()
                dialog.accept()
                QMessageBox.information(dialog, "–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
            else:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å")

        btn.clicked.connect(delete)
        dialog.exec()

    def show_find_dialog(self):
        dialog = QDialog(self)
        dialog.setWindowTitle("–ù–∞–π—Ç–∏ –ø—Ä–∏—ë–º")
        layout = QFormLayout(dialog)

        name = QLineEdit()
        owner = QLineEdit()
        layout.addRow("–ö–ª–∏—á–∫–∞ (–ø—Ä–∏–º–µ—Ä: –ë–∞—Ä—Å–∏–∫):", name)
        layout.addRow("–í–ª–∞–¥–µ–ª–µ—Ü (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á –ü–µ—Ç—Ä–æ–≤):", owner)

        btn = QPushButton("–ù–∞–π—Ç–∏")
        layout.addWidget(btn)

        def find():
            if not name.text() or not owner.text():
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ò–º—è –∏ –≤–ª–∞–¥–µ–ª–µ—Ü –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                return

            if not (
                re.fullmatch(r"[–ê-–Ø][–∞-—è]+", name.text())
                and re.fullmatch(pattern, owner.text())
            ):
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                return

            data = Priem(name.text(), owner.text())
            node = self.tree.search(data)

            if not node:
                QMessageBox.warning(dialog, "–†–µ–∑—É–ª—å—Ç–∞—Ç", "–ü—Ä–∏—ë–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            info_dialog = QDialog(self)
            info_dialog.setWindowTitle("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∑–ª–µ")
            layout_info = QVBoxLayout(info_dialog)

            layout_info.addWidget(QLabel(f"<b>–ö–ª—é—á:</b> {node._key}"))
            layout_info.addWidget(QLabel(f"<b>–ë–∞–ª–∞–Ω—Å:</b> {node._balance}"))
            layout_info.addWidget(QLabel("<b>–ü—Ä–∏—ë–º—ã:</b>"))

            if node._list is None or node._list._head is None:
                layout_info.addWidget(QLabel("–ù–µ—Ç –ø—Ä–∏—ë–º–æ–≤ –≤ —ç—Ç–æ–º —É–∑–ª–µ."))
            else:
                cur = node._list._head
                while cur:
                    idx = cur._data
                    p = None
                    if 0 <= idx < len(self.main_window.all_data):
                        p = self.main_window.all_data[idx]

                    if p:
                        info = (
                            f"–ò–Ω–¥–µ–∫—Å: {idx}\n"
                            f"–ò–º—è: {p._name}\n"
                            f"–í–ª–∞–¥–µ–ª–µ—Ü: {p._owner}\n"
                            f"–î–∏–∞–≥–Ω–æ–∑: {p._dianoz}\n"
                            f"–î–æ–∫—Ç–æ—Ä: {p._doctor}\n"
                            f"–î–∞—Ç–∞: {p._date}\n"
                        )
                        layout_info.addWidget(QLabel(info))
                    else:
                        layout_info.addWidget(QLabel(f"[–ò–Ω–¥–µ–∫—Å {idx} –Ω–µ –Ω–∞–π–¥–µ–Ω]"))
                    cur = cur._next

            close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_btn.clicked.connect(info_dialog.accept)
            layout_info.addWidget(close_btn)

            info_dialog.setLayout(layout_info)
            info_dialog.exec()

        btn.clicked.connect(find)
        dialog.exec()

    def export_data(self):
        lst = self.main_window.all_data
        file_path, _ = QFileDialog.getSaveFileName(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫", "", "Text Files (*.txt);;All Files (*)"
        )
        if not file_path:
            return
        try:
            with open(file_path, "w", encoding="utf-8") as file:

                def traverse(node):
                    if not node:
                        return
                    traverse(node._left)
                    cur = node._list._head
                    while cur:
                        idx = cur._data
                        i = self.main_window.all_data[idx]
                        line = f"{i._name} {i._owner} {i._dianoz} {i._doctor} {i._date}"
                        file.write(line + "\n")
                        cur = cur._next
                    traverse(node._right)

                traverse(self.tree._root)
            QMessageBox.information(
                self, "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã."
            )
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
